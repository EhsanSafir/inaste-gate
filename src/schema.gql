# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum ConfirmStatusEnum {
  APPROVED
  PENDING
  REJECTED
}

input CreateInvestorInput {
  age: Int!
  employCount: Int!
  investmentEmail: String!
  investmentField: String!
  organizationalChat: String!
  previewExp: String!
  totalAnnualIncome: Int!
  userId: String
}

input CreateMessageInput {
  body: String!
  receiverId: String!
  senderId: String
  subject: String!
}

input CreateStartupInput {
  closingDate: Timestamp!
  details: String!
  email: String!
  foundedOn: Timestamp!
  investmentMin: String!
  investmentTarget: String!
  location: String!
  startupName: String!
  startupsApplyId: String!
  summery: String!
  userId: String
  website: String!
}

input CreateStartupsApplyInput {
  companyAddress: String!
  currentAudienceSize: String!
  expectRaiseAmount: String!
  hasProductInMarket: Boolean!
  industryType: IndustryTypeEnum!
  isMakingMoney: Boolean!
  pastProject: String!
  startupName: String!
  summery: String!
  totalRaisedUntilNow: String!
  traction: String!
  userId: String
  website: String!
  yourTitle: String!
}

enum IndustryTypeEnum {
  ENERGY
  FASHION
  FOOD
  HEALTH
  MEDIA
  SERVICE
}

type InvestedStartup {
  createdAt: Timestamp!
  id: String!
  investor: User!
  investorId: String!
  startup: Startup!
  startupId: String!
}

type Investor {
  age: Int!
  confirmStatus: ConfirmStatusEnum!
  employCount: Int!
  id: String!
  investmentEmail: String!
  investmentField: String!
  organizationalChat: String!
  previewExp: String!
  totalAnnualIncome: Int!
  userId: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  accessToken: String!
  refreshToken: String
  user: User!
}

type Message {
  body: String!
  createdAt: Timestamp!
  id: String!
  receiver: User!
  receiverId: String!
  sender: User!
  senderId: String!
  subject: String!
}

type Mutation {
  createInvestorParticipant(startup: String!): InvestedStartup!
  createInvestorProfile(createInvestorInput: CreateInvestorInput!): Investor!
  createMessage(createMessageInput: CreateMessageInput!): Message!
  createStartup(createStartupInput: CreateStartupInput!): Startup!
  createStartupApply(createStartupsApplyInput: CreateStartupsApplyInput!): StartupsApply!
  inactivateStartup(id: String!): Startup!
  logIn(loginInput: LoginInput!): LoginResponse!
  refreshToken(token: String!): RefreshTokenResponse!
  signUp(signupAuthInput: SignupAuthInput!): SignupResponse!
  updateStartup(updateStartupInput: UpdateStartupInput!): Startup!
}

type Query {
  allStartupApplyByCurrentUser: [StartupsApply!]!
  allStartups: [Startup!]!
  allStartupsByCurrentUser: [Startup!]!
  hasInvestorProfile: Boolean!
  investorProfile: Investor!
  me: User!
  messageByCurrentUser: [Message!]!
  startupById(id: Int!): Startup!
  startupsApplyById(id: String!): StartupsApply!
}

type RefreshTokenResponse {
  accessToken: String!
  refreshToken: String
}

input SignupAuthInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type SignupResponse {
  email: String!
  firstName: String!
  id: String!
  lastName: String!
}

type Startup {
  closingDate: Timestamp!
  confirmStatus: ConfirmStatusEnum!
  createdAt: Timestamp!
  details: String!
  email: String!
  foundedOn: Timestamp!
  id: String!
  investmentMin: String!
  investmentTarget: String!
  isActive: Boolean!
  isTrending: Boolean!
  location: String!
  modifiedAt: Timestamp!
  startupName: String!
  startupsApply: StartupsApply!
  startupsApplyId: String!
  summery: String!
  user: User!
  userId: String!
  website: String!
}

type StartupsApply {
  companyAddress: String!
  confirmStatus: ConfirmStatusEnum!
  createdAt: Timestamp!
  currentAudienceSize: String!
  expectRaiseAmount: String!
  hasProductInMarket: Boolean!
  id: String!
  industryType: IndustryTypeEnum!
  isMakingMoney: Boolean!
  pastProject: String!
  startup: Startup!
  startupName: String!
  summery: String!
  totalRaisedUntilNow: String!
  traction: String!
  user: User!
  userId: String!
  website: String!
  yourTitle: String!
}

type Subscription {
  messageEvent: Message!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateStartupInput {
  closingDate: Timestamp
  details: String
  email: String
  foundedOn: Timestamp
  id: String!
  investmentMin: String
  investmentTarget: String
  location: String
  startupName: String
  startupsApplyId: String
  summery: String
  userId: String
  website: String
}

type User {
  appliedStartup: [StartupsApply!]
  email: String!
  firstName: String!
  id: String!
  isEmailVerified: Boolean!
  lastName: String!
  password: String!
  startup: [Startup!]
}